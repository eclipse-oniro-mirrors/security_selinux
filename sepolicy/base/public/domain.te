# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


allow domain init:process sigchld;

allow domain self:process { fork sigchld sigkill sigstop signull signal getsched setsched getsession getpgid setpgid getcap setcap getattr setrlimit };

allow domain self:fd use;
allow { domain -limit_domain } self:file rw_file_perms;
allow domain self:fifo_file rw_file_perms;
allow domain self:dir read_dir_perms;
allow domain self:lnk_file read_file_perms;
allow domain self:unix_dgram_socket { connect create write };
allow domain self:unix_stream_socket { accept bind connect create getattr listen read getopt setopt write connectto ioctl lock append shutdown map };
allow domain self:lockdown confidentiality;

allow domain init:fd use;

allow domain tmpfs:dir { getattr search };
allow domain tmpfs:lnk_file read;

allow domain proc_attr:dir read_dir_perms;
allow domain proc_attr:lnk_file { getattr read };

allow domain rootfs:dir search;
allow domain rootfs:lnk_file { read getattr };

allow domain dev_file:dir search;
allow domain dev_null_file:chr_file rw_file_perms;
allow domain dev_zero_file:chr_file rw_file_perms;
allow domain dev_ashmem_file:chr_file { getattr read ioctl lock map append write };
allow domain dev_binder_file:chr_file { ioctl map open read write };
allowxperm domain dev_binder_file:chr_file ioctl { 0x6201 0x6205 0x6208 0x6209 0x621e 0x621f };
allow domain dev_at_file:chr_file { ioctl open read write };
allowxperm domain dev_at_file:chr_file ioctl { 0x4101 };

allow domain dev_unix_file:dir search;
allow domain dev_unix_socket_file:dir { search };
allow domain dev_unix_socket_file:sock_file { write };

allow domain dev_random_file:chr_file rw_file_perms;
allow domain dev_parameters_file:dir { getattr search };
allow { domain -limit_domain } dev_parameters_file:file read_file_perms;

allow domain system_etc_file:dir { open read search getattr };
allow { domain -limit_domain } system_etc_file:file { getattr map open read };

allow domain system_file:dir { search };
allow domain vendor_file:dir search;

allow domain { lib_file system_lib_file vendor_lib_file }:dir { search };
allow { domain -limit_domain } { lib_file system_lib_file vendor_lib_file }:file { execute getattr map open read };
allow domain { lib_file system_lib_file vendor_lib_file }:lnk_file { read };

allow { domain -limit_domain } system_profile_file:file read_file_perms;
allow domain system_profile_file:dir search;

allow domain sysfs_attr:lnk_file { getattr read };
allow domain sysfs_attr:dir search;

allow { domain -limit_domain } selinuxfs:file getattr;

allow domain debugfs:dir search;

allow domain fs_attr:filesystem getattr;
allow domain { fs_attr -unlabeled }:dir getattr;

allow domain etc_file:lnk_file { read };

allow { domain -hap_domain } kernel:fd use;

allow domain init:unix_dgram_socket { sendto };
allow { domain -hap_domain } init:unix_stream_socket { read write };
allow { domain -hap_domain } init:netlink_kobject_uevent_socket { read write };

dontaudit domain domain:process noatsecure;
# neverallow rules
neverallow { domain -init } dev_parameters_file:file write;
neverallow { domain -init } data_parameters:dir never_write_dir;

neverallow { domain -init -hap_domain } proc_file:{ file dir } mounton;

#todo audio edm hidump installs location multimodalinput netmanager normal pwer thermal..
#neverallow { domain -init -foundation } data_file:dir { write add_name remove_name };

neverallow { domain -hdcd -installs -init -hidumper_service -power_host } data_local_tmp:dir never_write_dir;

neverallow { domain -hdcd -hap_domain -init -installs -foundation -hidumper_service -power_host -sh } data_local_tmp:dir { open search };

neverallow { domain -init } { proc_attr sysfs_attr }:dir { add_name create link remove_name rename reparent rmdir write };

neverallow { domain -samgr } *:binder set_context_mgr;

neverallow { domain -init } hdcd:process transition;

neverallow * hdcd:process dyntransition;

neverallow * { file_attr fs_attr dev_attr }:{ lnk_file fifo_file sock_file } mounton;

neverallow { domain -init -hidumper_service -hiview } debugfs: { file lnk_file } never_rw_file;

#ioctl cmd TIOCSTI
neverallowxperm * devpts:chr_file ioctl 0x5412;

neverallow { domain -udevd } dev_port:chr_file ~{ create relabelto unlink setattr getattr };

neverallow * *:{ blk_file chr_file } rename;

neverallow * *:{ shm sem msg msgq } *;

neverallow domain self:lockdown integrity;

neverallow * self:memprotect mmap_zero;

# only execute file with exec_attr & system_bin_file & vendor_bin_file ToDo delete vendor_file
neverallow * { file_attr -lib_file -system_bin_file -system_lib_file -vendor_bin_file -vendor_lib_file -vendor_file -exec_attr -hap_file_attr }:file { execute execute_no_trans entrypoint };

# keep every process join the domain attribute.
neverallow ~domain domain:process { transition dyntransition };

# everyone should in { sadomain hdfdomain hap_domain nativedomain }
neverallow domain { domain -init -sadomain -hdfdomain -hap_domain -nativedomain }:process { transition dyntransition };

# keep every file join file_attr
neverallow * ~{ file_attr domain fs_attr dev_attr } :{ dir notdevfile_class_set } *;

neverallow domain ~{ domain fs_attr dev_attr system_file_attr vendor_file_attr proc_attr sysfs_attr data_file_attr rootfs_file_attr }:{ file dir } *;
# keep every dev_node join dev_attr
neverallow * ~{ dev_attr fs_attr } :devfile_class_set *;

# keep every paramter join parameter_attr
neverallow * ~parameter_attr:parameter_service *;

# keep every service join service_type
neverallow * ~sa_service_attr:samgr_class ~list;
neverallow * ~samgr:samgr_class list;

# keep every hdf service join hdf_service_attr
neverallow * ~hdf_service_attr:hdf_devmgr_class ~list;
neverallow * ~hdf_devmgr:hdf_devmgr_class list;

neverallow domain default_param:parameter_service *;
neverallow domain default_service:samgr_class *;
neverallow domain default_hdf_service:hdf_devmgr_class *;

# Please set secon field service's cfg file, don't use limit_domain!
neverallow limit_domain *:file *;
neverallow domain limit_domain:binder *;

# every file should have a label. The unlabeled file shouldn't be accessed.
neverallow { domain -init -kernel } unlabeled:dir_file_class_set *;

# keep selinuxfs safe.
neverallow * kernel:security { load_policy setenforce setbool };
neverallow { domain -kernel } kernel:security setcheckreqprot;
neverallow { domain -init } kernel:security setsecparam;

# can't use domain type as exec target.
neverallow * domain:file { execute execute_no_trans entrypoint };

# never use set stack and heap executable.
neverallow * self:process { execstack execheap };

# dev node file label should be configured in file_contexts.
#/dev/char
#/dev/v4l
#neverallow { domain -ueventd } dev_file:{ file chr_file blk_file } *;

neverallow { domain -kernel -init -misc -updater_sa -storage_daemon } dev_attr:blk_file { open read write };
# only init can operate fs
neverallow { domain -init -storage_daemon -hdcd -hap_domain } *:filesystem ~{ getattr };

#neverallow { domain -hap_domain } hap_file_attr:file open;

neverallow domain rootfs:file { create write setattr relabelto append unlink link rename };

neverallow { domain -init -memmgrservice } { proc_attr sysfs_attr }:dir { add_name create link rename remove_name reparent rmdir write };
# limit capability use.
# for exemption add rule like this:
# neverallow { domain -init } self:capability chown;
# means that only init can have the caps of chown.
# TODO:debug/release
#neverallow { domain -appspawn -init -ueventd } self:{ capability cap_userns } chown;
#neverallow { domain -appspawn -init -udevd -memmgrservice } self:{ capability cap_userns } dac_override;
#neverallow { domain -appspawn -init } self:{ capability cap_userns } dac_read_search;
#neverallow { domain -init -udevd -ueventd } self:{ capability cap_userns } fowner;
#neverallow { domain -appspawn -init -ueventd } self:{ capability cap_userns } fsetid;
#neverallow { domain -init -memmgrservice } self:{ capability cap_userns } kill;
#neverallow { domain -init } self:{ capability cap_userns } setuid;
#neverallow { domain -init -ueventd -appspawn } self:{ capability cap_userns } setgid;
#neverallow { domain -init } self:{ capability cap_userns } setpcap;
#neverallow * self:{ capability cap_userns } linux_immutable;
#neverallow * self:{ capability cap_userns } net_bind_service;
#neverallow * self:{ capability cap_userns } net_broadcast;
#neverallow { domain -init -wifi_hal_service -wifi_manager_service -softbus_server } self:{ capability cap_userns } net_admin;
#neverallow { domain -wifi_hal_service } self:{ capability cap_userns } net_raw;
#neverallow * self:{ capability cap_userns } ipc_lock;
#neverallow * self:{ capability cap_userns } ipc_owner;
#neverallow * self:{ capability cap_userns } sys_module;
#neverallow { domain -init } self:{ capability cap_userns } sys_rawio;
#neverallow { domain -init } self:{ capability cap_userns } sys_chroot;
#neverallow * self:{ capability cap_userns } sys_ptrace;
#neverallow * self:{ capability cap_userns } sys_pacct;
#neverallow { domain -init } self:{ capability cap_userns } sys_admin;
#neverallow { domain -init } self:{ capability cap_userns } sys_boot;
#neverallow * self:{ capability cap_userns } sys_nice;
#neverallow { domain -init -memmgrservice } self:{ capability cap_userns } sys_resource;
#neverallow { domain -time_service } self:{ capability cap_userns } sys_time;
#neverallow * self:{ capability cap_userns } sys_tty_config;
#neverallow { domain -ueventd } self:{ capability cap_userns } mknod;
#neverallow * self:{ capability cap_userns } lease;
#neverallow * self:{ capability cap_userns } audit_write;
#neverallow * self:{ capability cap_userns } audit_control;
#neverallow * self:{ capability cap_userns } setfcap;
#neverallow * self:{ capability2 cap2_userns } mac_override;
#neverallow * self:{ capability2 cap2_userns } mac_admin;
#neverallow * self:{ capability2 cap2_userns } syslog;
#neverallow { domain -time_service } self:{ capability2 cap2_userns } wake_alarm;
#neverallow { domain -power_host } self:{ capability2 cap2_userns } block_suspend;
#neverallow * self:{ capability2 cap2_userns } audit_read;
#neverallow { domain -hdcd } self:{ capability2 cap2_userns } checkpoint_restore;
#neverallow * self:{ capability2 cap2_userns } perfmon;

neverallow { domain -appspawn -init -ueventd -installs -storage_daemon -udevd -kernel } self:{ capability cap_userns } chown;
neverallow { domain -appspawn -init -udevd -memmgrservice -blue_host -bluetooth_service -camera_host -codec_host -disp_gralloc_host
             -face_auth_host -faultloggerd -fingerprint_auth_host -hdcd -hiview -installs -location_host
             -misc -mmi_uinput_service -multimodalinput -netsysnative -pin_auth_host -power_host
             -resource_schedule_service -storage_daemon -usb_host -usbfnMaster_host -user_auth_host
             -wifi_host -kernel  } self:{ capability cap_userns } dac_override;
neverallow { domain -appspawn -init -hdcd -hidumper_service -hiview -installs -kernel -power_host -storage_daemon } self:{ capability cap_userns } dac_read_search;
neverallow { domain -init -udevd -ueventd -installs -storage_daemon } self:{ capability cap_userns } fowner;
neverallow { domain -appspawn -init -ueventd -storage_daemon -udevd } self:{ capability cap_userns } fsetid;
neverallow { domain -init -memmgrservice -appspawn } self:{ capability cap_userns } kill;
neverallow { domain -init -normal_hap -system_basic_hap } self:{ capability cap_userns } setuid;
neverallow { domain -init -ueventd -appspawn -normal_hap -system_basic_hap } self:{ capability cap_userns } setgid;
neverallow { domain -init } self:{ capability cap_userns } setpcap;
neverallow * self:{ capability cap_userns } linux_immutable;
neverallow * self:{ capability cap_userns } net_bind_service;
neverallow * self:{ capability cap_userns } net_broadcast;
neverallow { domain -init -wifi_hal_service -wifi_manager_service -softbus_server -netsysnative -storage_daemon -udevd } self:{ capability cap_userns } net_admin;
neverallow { domain -wifi_hal_service } self:{ capability cap_userns } net_raw;
neverallow * self:{ capability cap_userns } ipc_lock;
neverallow * self:{ capability cap_userns } ipc_owner;
neverallow { domain -netsysnative } self:{ capability cap_userns } sys_module;
neverallow { domain -init } self:{ capability cap_userns } sys_rawio;
neverallow { domain -init } self:{ capability cap_userns } sys_chroot;
neverallow { domain -hidumper_service -init -memmgrservice -storage_daemon } self:{ capability cap_userns } sys_ptrace;
neverallow * self:{ capability cap_userns } sys_pacct;
neverallow { domain -init -normal_hap -system_basic_hap -storage_daemon } self:{ capability cap_userns } sys_admin;
neverallow { domain -init } self:{ capability cap_userns } sys_boot;
neverallow { domain -render_service } self:{ capability cap_userns } sys_nice;
neverallow { domain -init -memmgrservice } self:{ capability cap_userns } sys_resource;
neverallow { domain -time_service } self:{ capability cap_userns } sys_time;
neverallow * self:{ capability cap_userns } sys_tty_config;
neverallow { domain -ueventd -kernel -storage_daemon } self:{ capability cap_userns } mknod;
neverallow * self:{ capability cap_userns } lease;
neverallow * self:{ capability cap_userns } audit_write;
neverallow * self:{ capability cap_userns } audit_control;
neverallow * self:{ capability cap_userns } setfcap;
neverallow * self:{ capability2 cap2_userns } mac_override;
neverallow * self:{ capability2 cap2_userns } mac_admin;
neverallow * self:{ capability2 cap2_userns } syslog;
neverallow { domain -time_service } self:{ capability2 cap2_userns } wake_alarm;
neverallow { domain -power_host } self:{ capability2 cap2_userns } block_suspend;
neverallow * self:{ capability2 cap2_userns } audit_read;
neverallow { domain -hdcd } self:{ capability2 cap2_userns } checkpoint_restore;
neverallow * self:{ capability2 cap2_userns } perfmon;
neverallow { domain -storage_manager -hidumper_service -samgr } storage_daemon:{ binder } call;
